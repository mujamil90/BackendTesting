# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build-and-test:
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # Be sure to update the Docker image tag below to openjdk version of your application.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/openjdk
    docker:
      - image: cimg/openjdk:11.0
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout
      # Use mvn clean and install all required dependencies
      - run:
          name: build
          command: mvn -B -DskipTests clean install 
      # Then run your tests!
      - run:
          name: Test
          command: mvn test -Dsurefire.suiteXmlFiles=API-Tests.xml  
          # Generate allure report
commands:
  install:
    description: Installs Allure Framework and registers it as /usr/local/bin/allure
    parameters:
      version:
        description: Allure version to use
        type: string
        default: 2.13.1
    steps:
      - run:
          name: Allure archive download
          command: curl -L https://github.com/allure-framework/allure2/releases/download/<< parameters.version >>/allure-commandline-<< parameters.version >>.zip -o /tmp/allure.zip
      - run:
          name: Archive extraction
          command: unzip /tmp/allure.zip
      - run:
          name: Allure installation
          command: sudo mv allure-<< parameters.version >> /usr/local/share/allure
      - run:
          name: Allure binary symlinking
          command: sudo ln -s /usr/local/share/allure/bin/allure /usr/local/bin/allure
  report:
    description: Generates report using Allure Framework
    parameters:
      configuration-path:
        description: Path to Allure configuration, uses default one if omitted
        type: string
        default: /usr/local/share/allure/config/allure.yml
      target-path:
        description: Path for report directory
        type: string
        default: allure-report
      results-path:
        description: Path to directory with test results
        type: string
        default: allure-results
      artifact-path:
        description: Path that will be used when storing result as artifact
        type: string
        default: Report/Allure
    steps:
      - run:
          name: Allure report generation (<< parameters.results-path >> -> << parameters.target-path >>)
          command: |
            allure generate \
              --config << parameters.configuration-path >> \
              --report-dir << parameters.target-path >> \
              << parameters.results-path >>
      - store_artifacts:
          path: /tmp/artifacts
          destination: << parameters.artifact-path >>

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  sample: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build-and-test
